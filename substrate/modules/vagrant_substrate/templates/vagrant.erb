#!/usr/bin/env bash
#
# This is a wrapper to properly execute Vagrant within the embedded
# Vagrant installation directory. This sets up proper environmental variables
# so that everything loads and compiles to proper directories.

# Get the directory where this script is. This will also resolve
# any symlinks in the directory/script, so it will be the fully
# resolved path.
CURDIR="$(pwd)"
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  cd "$(dirname "$SOURCE")"
  SOURCE="$(readlink "$SOURCE")"
done
DIR="$(cd -P "$( dirname "$SOURCE" )" && pwd)"
cd "$CURDIR"

# Useful variables
EMBEDDED_DIR="${DIR}/../embedded"

# Export gem paths so that we use the isolated gems.
export GEM_PATH="${EMBEDDED_DIR}/lib/ruby/gems/2.0.0"
export GEM_HOME="${GEM_PATH}"
export GEMRC="${EMBEDDED_DIR}/etc/gemrc"

# Make ruby aware of our CA bundle
export SSL_CERT_FILE="${EMBEDDED_DIR}/cacert.pem"

# Export an enviromental variable to say we're in a Vagrant
# installer created environment.
export VAGRANT_INSTALLER_ENV=1
export VAGRANT_INSTALLER_EMBEDDED_DIR="${EMBEDDED_DIR}"
export VAGRANT_INSTALLER_VERSION="<%= @installer_version %>"

# Setup CPPFLAGS/LDFLAGS so that any gem installs (for plugins) will
# be able to link against our tools. First, append a space to any
# previously set CPPFLAGS/LDFLAGS.
if [ "${CPPFLAGS}x" != "x" ]; then
  CPPFLAGS="$CPPFLAGS "
fi

if [ "${CFLAGS}x" != "x" ]; then
  CFLAGS="$CFLAGS "
fi

if [ "${LDFLAGS}x" != "x" ]; then
  LDFLAGS="$LDFLAGS "
fi

# Append our include/lib search path to the flags and make sure they're
# exported so that any child processes have access to them. We set
# CFLAGS as well since some old plugins don't use CPPFLAGS.
export CPPFLAGS="${CPPFLAGS}-I${EMBEDDED_DIR}/include -I${EMBEDDED_DIR}/include/libxml2"
export CFLAGS="${CFLAGS}-I${EMBEDDED_DIR}/include -I${EMBEDDED_DIR}/include/libxml2"
export LDFLAGS="${LDFLAGS}-L${EMBEDDED_DIR}/lib"

# Determine the OS that we're on, which is used in some later checks.
# It is very important we do this _before_ setting the PATH below
# because uname dependencies can conflict on some platforms.
OS=$(uname -s 2>/dev/null)

# Export the OS as an environmental variable that Vagrant can access
# so that it can behave better.
export VAGRANT_DETECTED_OS="${OS}"

# Prepend our embedded dir to the PATH so that we call that preferably
export PATH="${EMBEDDED_DIR}/bin:${PATH}"

# Unset any RUBYOPT and RUBYLIB, we don't want these bleeding into our
# runtime.
unset RUBYOPT
unset RUBYLIB

# Set the path to the Ruby executable
RUBY_EXECUTABLE="${EMBEDDED_DIR}/bin/ruby"

# Find the Vagrant executable
for needle in "${GEM_PATH}/gems/vagrant-"*; do
  if [ -f "${needle}/lib/vagrant/pre-rubygems.rb" ]; then
    VAGRANT_GEM_PATH="${needle}"
  fi
done

VAGRANT_EXECUTABLE="${VAGRANT_GEM_PATH}/bin/vagrant"
VAGRANT_LAUNCHER="${VAGRANT_GEM_PATH}/lib/vagrant/pre-rubygems.rb"

# Do some things depending on the OS that we're running on.
case $OS in
	CYGWIN* | MINGW32* | MINGW64*)
		# In Linux-like environments on Windows, we want to add the
		# Windows path to the PATH so that bsdtar and friends can
		# be found.
		export PATH="${EMBEDDED_DIR}/mingw/bin:${PATH}"
		;;
	Darwin*)
		# This is required until we use Ruby 2.2 to avoid an issue with
		# Clang on OS X 10.9.
		export ARCHFLAGS="${ARCHFLAGS} -Wno-error=unused-command-line-argument-hard-error-in-future"
		;;
esac

# Additional things to do that is OS-specific. We put this in a separate
# case clause because we're matching specific OS's here.
case $OS in
	CYGWIN*)
		# If we're in Cygwin, we want to convert the path to a Windows path, rather
		# than a Cygwin path, which Ruby does not work with.
		VAGRANT_EXECUTABLE=`cygpath -wla "${VAGRANT_EXECUTABLE}"`
		VAGRANT_INSTALLER_EMBEDDED_DIR=`cygpath -wla "${EMBEDDED_DIR}"`
		VAGRANT_LAUNCHER=`cygpath -wla "${VAGRANT_LAUNCHER}"`
		GEM_HOME=`cygpath -wla "${GEM_HOME}"`
		GEM_PATH=`cygpath -wla "${GEM_PATH}"`
		SSL_CERT_FILE=`cygpath -wla "${SSL_CERT_FILE}"`
		;;
esac

# Export the VAGRANT_EXECUTABLE so that pre-rubygems can optimize a bit
export VAGRANT_EXECUTABLE

# Call the actual Vagrant bin with our arguments
exec "${RUBY_EXECUTABLE}" "${VAGRANT_LAUNCHER}" "$@"
